#!/usr/bin/bash

. utils.sh
require_collection_id "$@"

if [[ $# -ge 2 ]]; then     # pass source URL and optional format for testing
  url=$2
  format=${3:-rdf}
else                        # get source URL from collections database
  collections=$STAGE/collection/collections.json
  [[ -f $collections ]] || error "Missing $collections, please update list of collections!"

  name=$(jq -r ".[]|select(.uri==\"$uri\")|.name" $collections)
  [[ -n "$name" ]] || error "Collection $id not found!"
  echo $name

  # create collection.json and collection.nt

  stage=$STAGE/collection/$id
  about=$stage/collection.json
  mkdir -p $stage

  jq -r ".[]|select(.uri==\"$uri\")" $collections > $about
  npm run --silent -- jsonld2rdf -c collection-context.json $about > $stage/collection.nt

  url=$(jq -r ".access?.url // \"\"" $about)
  format=$(jq -r ".access?.format // \"\" | split(\"/\")[-1]" $about)
fi

[[ -z "$url" ]] && error "Missing access URL to download collection data from!"

# TODO: support OAI-PMH for LIDO/XML
if [[ "$format" != "rdf" ]]; then
  error "Only RDF data supported so far, got $format"
fi

echo "Receive $format data from $url"

rm -rf $stage/download
mkdir -p $stage/download

./download-from-repository.py --progress off $url $stage/download  

# TODO: support LIDO/XML via repository
./extract-rdf.py $stage/download $stage/triples.nt
./transform-rdf $stage/triples.nt     # includes validation

